# -*- coding: utf-8 -*-
"""ProyectoMision3_William_Fernandez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yAoLqOOGaw4fi7hWqDTv9D1xll0Y8hdK

Inicio importando las librerias neceasrias para el proyecto
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar datos desde Excel
datos = pd.read_excel('Datos_Salud_1500.xlsx')

# Mostrar los primeros registros
print("Datos cargados:")
print(datos)

#Exploracion de los datos
# Mostrar información general
print("\nInformación general:")
print(datos.info())

# Mostrar estadísticas descriptivas
print("\nEstadísticas descriptivas:")
print(datos.describe())

# Verificar valores nulos
print("\nValores nulos por columna:")
print(datos.isnull().sum())

# Verificar registros duplicados
print("\nNúmero de registros duplicados:")
print(datos.duplicated().sum())

# Elimino Nulos
datos = datos.dropna()
print("\nValores nulos por columna después de eliminarlos:")
print(datos.isnull().sum())

# Eliminar registros duplicados
datos = datos.drop_duplicates()
print("\nNúmero de registros duplicados después de eliminarlos:")
print(datos.duplicated().sum())

#Verifico mis datos actuales
print(datos)

"""Una vez finalizada la limpieza de mis datos procedo a la transformacion de los datos


"""

#TRANFORMAR LOS DATOS
#agregar Nivel_Salud

Nivel_Salud=[]
for Salud_Puntaje in datos['Salud_Puntaje']:
    if Salud_Puntaje >= 75:
        Nivel_Salud.append('Alto')
    else:
        Nivel_Salud.append('Bajo')

#Una vez creada mi nueva columna "Nivel_Salud" la anexo a mi tabla de datos principal

datos['Nivel_Salud'] = Nivel_Salud

#Verfico mis datos actuales
print(datos)

print("\nGraficando datos actuales:")
print(datos)
plt.scatter(datos['Horas_Ejercicio'], datos['Salud_Puntaje'], color='blue') # Crear gráfico de dispersión
plt.title('Horas de Ejercicio vs Puntos de Salud') # Título del gráfico
plt.xlabel('Horas de Ejercicio') # Etiqueta eje X
plt.ylabel('Puntos de Salud') # Etiqueta eje Y
plt.grid(True) # Mostrar cuadrícula
plt.show() # Mostrar gráfico

# Comparación de Puntos de salud por horas de ejercicio
sns.boxplot(x='Horas_Ejercicio', y='Salud_Puntaje', data=datos)
plt.title('Horas de ejercicio por puntos de salud')
plt.show()

# Distribución horas de ejercicio y nivel de salud
sns.countplot(x='Nivel_Salud', hue='Horas_Ejercicio', data=datos)
plt.title('Distribucion horas de ejercio por nivel de salud')
plt.show()

# Comparación de Puntos de salud por horas de ejercicio
sns.boxplot(x='Horas_Ejercicio', y='Nivel_Salud', data=datos)
plt.title('Horas de ejercicio por Nivel de salud')
plt.show()